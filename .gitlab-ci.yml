stages:
- buildCode
- analyzeCode
- publishCode
- buildDocker
- deploy


buildCode:
  stage: buildCode
  image: ngerp/maven:latest
  script: 
  - mvn clean package verify -B -Pprod,soapui,jacoco
  artifacts:
    when: on_success
    paths:
    - ./target/
  tags:
  - altemista_runner

analyzecode:
  stage: analyzeCode
  image: ngerp/sonar-scanner:4.0.0.1744
  script:
  - sonar-scanner -Dsonar.sources=src/main -Dsonar.projectKey=$CI_PROJECT_NAME -Dsonar.host.url=$X_SONAR_URL -Dsonar.password=$X_SONAR_TOKEN -Dsonar.java.binaries=./target -Dsonar.junit.reportPaths=./target/surefire-reports -Dsonar.coverage.jacoco.xmlReportPaths=./target/site/jacoco/jacoco.xml,./target/site/jacoco-it/jacoco.xml
  dependencies:
  - buildCode
  tags:
  - altemista_runner

publishCode:
  stage: publishCode
  image: ngerp/maven:latest
  script:
  - artifact=$(ls target/*.jar); mvn deploy:deploy-file -Durl=$X_ARTIFACTORY_URL/example-project -DrepositoryId=central -Dfile=$artifact -DgroupId=com.nttdata.nge.example-project -DartifactId=nge-example-server -Dversion=0.1.0-SNAPSHOT -Dpackaging=jar -DgeneratePom=true -e -X -B
  dependencies:
  - buildCode
  tags:
  - altemista_runner
  only:
  - master

dockerBuildAny:
  stage: buildDocker
  image: docker:19
  script:
  - docker build -t nge/sourcecode/nge-example-server:$CI_COMMIT_SHA .
  dependencies:
  - buildCode
  tags:
  - altemista_runner
  except:
  - master

dockerPushMaster:
  stage: buildDocker 
  image: docker:19
  script:
  - docker login $CI_REGISTRY_URL -u nrp -p $X_GITLAB_REGISTRY_TOKEN
  - docker build -t $CI_REGISTRY_URL/nge/sourcecode/nge-example-server:$CI_COMMIT_SHORT_SHA .
  - docker push $CI_REGISTRY_URL/nge/sourcecode/nge-example-server:$CI_COMMIT_SHORT_SHA
  dependencies:
  - buildCode
  tags:
  - altemista_runner
  only:
  - master

kubernetesDeploy:
  stage: deploy
  image: ngerp/kubectl:latest
  before_script:
  - sed -i -e "s/###IMAGE###/registry.altemista.cloud\/nge\/sourcecode\/nge-example-server\:$CI_COMMIT_SHORT_SHA/g" ./deployment.yaml
  - sed -i -e "s/###PULLSECRET###/$CI_PROJECT_NAME/g" ./deployment.yaml
  - cat ./deployment.yaml
  script:
  - if kubectl --insecure-skip-tls-verify=true --server "$K8S_API_URL" --token "$K8S_API_TOKEN" get ns $X_PROJECT_NAMESPACE; then echo "Namespace already exists"; else kubectl --insecure-skip-tls-verify=true --server "$K8S_API_URL" --token "$K8S_API_TOKEN" create ns $X_PROJECT_NAMESPACE ; fi 
  - if kubectl --insecure-skip-tls-verify=true --server "$K8S_API_URL" --token "$K8S_API_TOKEN" get secret $CI_PROJECT_NAME -n $X_PROJECT_NAMESPACE; then echo "Secret exists"; else kubectl --insecure-skip-tls-verify=true --server "$K8S_API_URL" --token "$K8S_API_TOKEN" create secret docker-registry $CI_PROJECT_NAME --docker-server=https://$CI_REGISTRY_URL/ --docker-username=nrp --docker-password=$X_GITLAB_REGISTRY_TOKEN_RO -n $X_PROJECT_NAMESPACE; fi
  - kubectl --insecure-skip-tls-verify=true --server "$K8S_API_URL" --token "$K8S_API_TOKEN" apply -f deployment.yaml -n $X_PROJECT_NAMESPACE
  tags:
  - altemista_runner
  only:
  - master
