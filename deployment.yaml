apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nge-example-server
  name: nge-example-server
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: nge-example-server
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: nge-example-server
        spring-metrics: enabled
    spec:
      containers:
      - image: ###IMAGE### 
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        name: nge-example-server
      imagePullSecrets:
      - name: ###PULLSECRET###
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: nge-example-server
    spring-metrics: enabled
  name: nge-example-server
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
    name: http
  selector:
    app: nge-example-server
  type: ClusterIP
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: nge-example-server
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
    - host: "sample.nge.altemista.cloud"
      http:
        paths:
        - path: /todos
          backend:
            serviceName: nge-example-server 
            servicePort: 8080
---

# role required for monitoring to collect metrics

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: prometheus-k8s
  namespace: nge-example-server
rules:
- apiGroups:
  - ""
  resources:
  - services
  - endpoints
  - pods
  verbs:
  - get
  - list
  - watch

---

# rolebinding to attach the role to the serviceaccount in the monitoring namespace

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: prometheus-k8s
  namespace: nge-example-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: prometheus-k8s
subjects:
- kind: ServiceAccount
  name: prometheus-k8s
  namespace: monitoring

---

# servicemonitor: entity to tell the prometheus operator to scrape a certain target

apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: spring-metrics
spec:
  endpoints:
  - path: /actuator/prometheus
    port: http
  jobLabel: spring_metrics
  selector:
    matchLabels:
      spring-metrics: enabled
---

apiVersion: acid.zalan.do/v1
kind: postgresql
metadata:
  name: nrp-app
  namespace: nge-example-server
spec:
  databases:
    sampleapp: sample
  numberOfInstances: 2
  patroni:
    pg_hba:
    - host all all 0.0.0.0/0 md5
  postgresql:
    version: "9.6"
  teamId: nrp
  users:
    sample:
    - login
    root:
    - superuser
    - createdb
  volume:
    size: 2Gi
